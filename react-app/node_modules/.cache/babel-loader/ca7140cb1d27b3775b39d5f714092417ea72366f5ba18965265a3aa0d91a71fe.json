{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Windows10\\\\Documents\\\\GitHub\\\\react-project\\\\react-app\\\\src\\\\componants\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport requests from \"../request\";\nimport AnimeTable from \"./AnimeTable\";\nimport AnimeRow from \"./AnimeRow\";\nimport { useGlobalContext } from \"../context/global\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [animeData, setAnimeData] = useState({});\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const fetchedData = {};\n        for (const category in requests) {\n          const response = await axios.get(requests[category]);\n          fetchedData[category] = response.data.data;\n        }\n        setAnimeData(fetchedData);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    }\n    fetchData();\n  }, []);\n\n  // useEffect(() => {\n  //   async function fetchAnimeData() {\n  //     const request = await axios.get(fetchUrl);\n  //     setAnimes(request.data.data);\n  //     console.log(animes);\n  //     return request;\n  //   }\n  //   fetchAnimeData();\n  // }, [fetchUrl]);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container--animeRow\",\n      children: Object.keys(animeData).map(category => /*#__PURE__*/_jsxDEV(AnimeRow, {\n        title: category,\n        animes: animeData[category]\n      }, category, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Home, \"KAa+xUjNjf17n02dIybTHDA/txk=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","requests","AnimeTable","AnimeRow","useGlobalContext","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","animeData","setAnimeData","fetchData","fetchedData","category","response","get","data","error","console","children","className","Object","keys","map","title","animes","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Windows10/Documents/GitHub/react-project/react-app/src/componants/Home.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport requests from \"../request\";\r\nimport AnimeTable from \"./AnimeTable\";\r\nimport AnimeRow from \"./AnimeRow\";\r\nimport { useGlobalContext } from \"../context/global\";\r\nimport axios from \"axios\";\r\n\r\nfunction Home() {\r\n  const [animeData, setAnimeData] = useState({});\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const fetchedData = {};\r\n\r\n        for (const category in requests) {\r\n          const response = await axios.get(requests[category]);\r\n          fetchedData[category] = response.data.data;\r\n        }\r\n\r\n        setAnimeData(fetchedData);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   async function fetchAnimeData() {\r\n  //     const request = await axios.get(fetchUrl);\r\n  //     setAnimes(request.data.data);\r\n  //     console.log(animes);\r\n  //     return request;\r\n  //   }\r\n  //   fetchAnimeData();\r\n  // }, [fetchUrl]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container--animeRow\">\r\n        {Object.keys(animeData).map((category) => (\r\n          <AnimeRow\r\n            key={category}\r\n            title={category}\r\n            animes={animeData[category]}\r\n          />\r\n        ))}\r\n        {/* {loading ? (\r\n          <p>Loading...</p>\r\n        ) : (\r\n          <>\r\n            <AnimeRow title=\"Top 10 Hit\" animes={popularAnime} />\r\n            <AnimeRow title=\"Upcoming\" animes={upcomingAnime} />\r\n          </>\r\n        )} */}\r\n        {/* <AnimeRow title=\"Top 10 Hit\" fetchUrl={requests.fetchPopular} /> */}\r\n        {/* <AnimeRow title=\"Upcoming\" fetchFunction={getUpcomingAnime} /> */}\r\n        {/* <AnimeRow title=\"Airing\" fetchFunction={getAiringAnime} /> */}\r\n        {/* <AnimeRow title='Top Hit' fetchUrl={requests.fetchPopular} />\r\n      <AnimeRow title='Now Airing' fetchUrl={requests.fetchTopAiring} />\r\n      <AnimeTable  title='Fatasy' fetchUrl={requests.fetchAllTopAiring} />  */}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default Home;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,gBAAgB,QAAQ,mBAAmB;AACpD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd,eAAec,SAASA,CAAA,EAAG;MACzB,IAAI;QACF,MAAMC,WAAW,GAAG,CAAC,CAAC;QAEtB,KAAK,MAAMC,QAAQ,IAAIf,QAAQ,EAAE;UAC/B,MAAMgB,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAACjB,QAAQ,CAACe,QAAQ,CAAC,CAAC;UACpDD,WAAW,CAACC,QAAQ,CAAC,GAAGC,QAAQ,CAACE,IAAI,CAACA,IAAI;QAC5C;QAEAN,YAAY,CAACE,WAAW,CAAC;MAC3B,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF;IAEAN,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACEP,OAAA,CAAAE,SAAA;IAAAa,QAAA,eACEf,OAAA;MAAKgB,SAAS,EAAC,qBAAqB;MAAAD,QAAA,EACjCE,MAAM,CAACC,IAAI,CAACb,SAAS,CAAC,CAACc,GAAG,CAAEV,QAAQ,iBACnCT,OAAA,CAACJ,QAAQ;QAEPwB,KAAK,EAAEX,QAAS;QAChBY,MAAM,EAAEhB,SAAS,CAACI,QAAQ;MAAE,GAFvBA,QAAQ;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGd,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAeC;EAAC,gBACN,CAAC;AAEP;AAACrB,EAAA,CA3DQD,IAAI;AAAAuB,EAAA,GAAJvB,IAAI;AA4Db,eAAeA,IAAI;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}