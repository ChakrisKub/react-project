{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Windows10\\\\Documents\\\\GitHub\\\\react-project\\\\react-app\\\\src\\\\context\\\\global.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport reducer from \"./reducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GlobalContext = /*#__PURE__*/createContext();\nconst baseUrl = \"https://api.jikan.moe/v4\";\n\n//actions\nconst LOADING = \"LOADING\";\nconst SEARCH = \"SEARCH\";\nconst GET_POPULAR_ANIME = \"GET_POPULAR_ANIME\";\nconst GET_UPCOMING_ANIME = \"GET_UPCOMING_ANIME\";\nconst GET_AIRING_ANIME = \"GET_AIRING_ANIME\";\nconst GET_PICTURES = \"GET_PICTURES\";\nconst GET_ANIME_DETAILS = \"GET_ANIME_DETAILS\";\nconst GET_WINTER_ANIME = \"GET_WINTER_ANIME\";\nconst GET_SUMMER_ANIME = \"GET_SUMMER_ANIME\";\nconst GET_SPRING_ANIME = \"GET_SPRING_ANIME\";\nconst GET_FALL_ANIME = \"GET_FALL_ANIME\";\nconst GET_NOW_ANIME = \"GET_NOW_ANIME\";\nconst GlobalContextProvider = ({\n  children\n}) => {\n  _s();\n  //intial state\n  const intialState = {\n    popularAnime: [],\n    upcomingAnime: [],\n    airingAnime: [],\n    winterAnime: [],\n    summerAnime: [],\n    springAnime: [],\n    fallAnime: [],\n    nowAnime: [],\n    pictures: [],\n    animeDetails: [],\n    isSearch: false,\n    searchResults: [],\n    loading: false\n  };\n  const [state, dispatch] = useReducer(reducer, intialState);\n  const [search, setSearch] = useState(\"\");\n\n  //handle change\n  const handleChange = e => {\n    setSearch(e.target.value);\n    if (e.target.value === \"\") {\n      state.isSearch = false;\n    }\n  };\n\n  //handle submit\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (search) {\n      searchAnime(search);\n      state.isSearch = true;\n    } else {\n      state.isSearch = false;\n      alert(\"Please enter a search term\");\n    }\n  };\n\n  //fetch popular anime\n  const getPopularAnime = async () => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/anime?filter=bypopularity`);\n    const data = await response.json();\n    dispatch({\n      type: GET_POPULAR_ANIME,\n      payload: data.data\n    });\n  };\n\n  //fetch upcoming anime\n  const getUpcomingAnime = async () => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/top/anime?filter=upcoming`);\n    const data = await response.json();\n    dispatch({\n      type: GET_UPCOMING_ANIME,\n      payload: data.data\n    });\n  };\n\n  //fetch airing anime\n  const getAiringAnime = async () => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/top/anime?filter=airing`);\n    const data = await response.json();\n    dispatch({\n      type: GET_AIRING_ANIME,\n      payload: data.data\n    });\n  };\n\n  //search anime\n  const searchAnime = async anime => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/anime?q=${anime}&order_by=popularity&sort=asc&sfw`);\n    const data = await response.json();\n    dispatch({\n      type: SEARCH,\n      payload: data.data\n    });\n  };\n\n  //get anime pictures\n  const getAnimePictures = async id => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/characters/${id}/pictures`);\n    const data = await response.json();\n    dispatch({\n      type: GET_PICTURES,\n      payload: data.data\n    });\n  };\n\n  // Fetch anime details by ID\n  const getAnimeDetails = async id => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/anime/${id}`);\n    const data = await response.json();\n    dispatch({\n      type: GET_ANIME_DETAILS,\n      payload: data\n    });\n  };\n\n  // fetchWinterAnime: '/seasons/2022/winter'\n  const getWinterAnime = async () => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/seasons/2022/winter`);\n    const data = await response.json();\n    dispatch({\n      type: GET_WINTER_ANIME,\n      payload: data.data\n    });\n  };\n\n  // fetchAutumnAnime: '/seasons/2022/spring'\n  const getSpringAnime = async () => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/seasons/2022/spring`);\n    const data = await response.json();\n    dispatch({\n      type: GET_SPRING_ANIME,\n      payload: data.data\n    });\n  };\n\n  //fetchFallAnime:'/seasons/2022/Fall'\n  const getFallAnime = async () => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/seasons/2022/fall`);\n    const data = await response.json();\n    dispatch({\n      type: GET_FALL_ANIME,\n      payload: data.data\n    });\n  };\n\n  // fetchSummerAnime:'/seasons/2022/summer'\n  const getSummerAnime = async () => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/seasons/2022/summer`);\n    const data = await response.json();\n    dispatch({\n      type: GET_SUMMER_ANIME,\n      payload: data.data\n    });\n  };\n\n  // fetchNowSeason, 2 page:/seasons/now?type=anime&page=\n  const getNowAnime = async () => {\n    try {\n      dispatch({\n        type: LOADING\n      });\n      const totalPagesToFetch = 2;\n      let currentPage = 1;\n      let allData = [];\n      const delay = 2000; // 2 seconds delay\n\n      const fetchPageData = async page => {\n        const response = await fetch(`${baseUrl}/seasons/now?type=anime&page=${page}`);\n        const responseData = await response.json();\n        return responseData.data;\n      };\n      const fetchWithDelay = async () => {\n        if (currentPage <= totalPagesToFetch) {\n          const pageData = await fetchPageData(currentPage);\n          console.log('Response Data:', pageData);\n\n          // Convert the object properties to an array of anime objects\n          const animeArray = Object.values(pageData);\n          console.log('Anime Array:', animeArray);\n          allData = [...allData, ...animeArray];\n          dispatch({\n            type: GET_NOW_ANIME,\n            payload: allData\n          });\n          if (currentPage < totalPagesToFetch) {\n            currentPage++;\n            setTimeout(fetchWithDelay, delay);\n          }\n        }\n      };\n      fetchWithDelay();\n    } catch (error) {\n      console.error('Error fetching now airing anime:', error);\n    }\n  };\n  useEffect(() => {\n    const delay = 2000;\n    const fetchWithDelay = async fetchFunction => {\n      await new Promise(resolve => setTimeout(resolve, delay));\n      fetchFunction();\n    };\n    const fetchAllData = async () => {\n      await fetchWithDelay(getPopularAnime);\n      await fetchWithDelay(getUpcomingAnime);\n      await fetchWithDelay(getAiringAnime);\n      await fetchWithDelay(getWinterAnime);\n      await fetchWithDelay(getSummerAnime);\n      await fetchWithDelay(getSpringAnime);\n      await fetchWithDelay(getFallAnime);\n      await fetchWithDelay(getNowAnime);\n    };\n    fetchAllData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      ...state,\n      handleChange,\n      handleSubmit,\n      searchAnime,\n      search,\n      getPopularAnime,\n      getUpcomingAnime,\n      getAiringAnime,\n      getWinterAnime,\n      getSummerAnime,\n      getSpringAnime,\n      getFallAnime,\n      getNowAnime,\n      getAnimePictures,\n      getAnimeDetails\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n_s(GlobalContextProvider, \"lLOVGVtU33wTd0PjbByvhYXt3RY=\");\n_c = GlobalContextProvider;\nconst useGlobalContext = () => {\n  _s2();\n  return useContext(GlobalContext);\n};\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport { GlobalContextProvider, useGlobalContext };\nvar _c;\n$RefreshReg$(_c, \"GlobalContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useState","useEffect","reducer","jsxDEV","_jsxDEV","GlobalContext","baseUrl","LOADING","SEARCH","GET_POPULAR_ANIME","GET_UPCOMING_ANIME","GET_AIRING_ANIME","GET_PICTURES","GET_ANIME_DETAILS","GET_WINTER_ANIME","GET_SUMMER_ANIME","GET_SPRING_ANIME","GET_FALL_ANIME","GET_NOW_ANIME","GlobalContextProvider","children","_s","intialState","popularAnime","upcomingAnime","airingAnime","winterAnime","summerAnime","springAnime","fallAnime","nowAnime","pictures","animeDetails","isSearch","searchResults","loading","state","dispatch","search","setSearch","handleChange","e","target","value","handleSubmit","preventDefault","searchAnime","alert","getPopularAnime","type","response","fetch","data","json","payload","getUpcomingAnime","getAiringAnime","anime","getAnimePictures","id","getAnimeDetails","getWinterAnime","getSpringAnime","getFallAnime","getSummerAnime","getNowAnime","totalPagesToFetch","currentPage","allData","delay","fetchPageData","page","responseData","fetchWithDelay","pageData","console","log","animeArray","Object","values","setTimeout","error","fetchFunction","Promise","resolve","fetchAllData","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGlobalContext","_s2","$RefreshReg$"],"sources":["C:/Users/Windows10/Documents/GitHub/react-project/react-app/src/context/global.js"],"sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst GlobalContext = createContext();\r\nconst baseUrl = \"https://api.jikan.moe/v4\";\r\n\r\n//actions\r\nconst LOADING = \"LOADING\";\r\nconst SEARCH = \"SEARCH\";\r\nconst GET_POPULAR_ANIME = \"GET_POPULAR_ANIME\";\r\nconst GET_UPCOMING_ANIME = \"GET_UPCOMING_ANIME\";\r\nconst GET_AIRING_ANIME = \"GET_AIRING_ANIME\";\r\nconst GET_PICTURES = \"GET_PICTURES\";\r\nconst GET_ANIME_DETAILS = \"GET_ANIME_DETAILS\";\r\nconst GET_WINTER_ANIME = \"GET_WINTER_ANIME\";\r\nconst GET_SUMMER_ANIME = \"GET_SUMMER_ANIME\";\r\nconst GET_SPRING_ANIME = \"GET_SPRING_ANIME\";\r\nconst GET_FALL_ANIME = \"GET_FALL_ANIME\";\r\nconst GET_NOW_ANIME = \"GET_NOW_ANIME\";\r\n\r\nconst GlobalContextProvider = ({ children }) => {\r\n  //intial state\r\n  const intialState = {\r\n    popularAnime: [],\r\n    upcomingAnime: [],\r\n    airingAnime: [],\r\n    winterAnime: [],\r\n    summerAnime: [],\r\n    springAnime: [],\r\n    fallAnime: [],\r\n    nowAnime: [],\r\n    pictures: [],\r\n    animeDetails: [],\r\n    isSearch: false,\r\n    searchResults: [],\r\n    loading: false,\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(reducer, intialState);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  //handle change\r\n  const handleChange = (e) => {\r\n    setSearch(e.target.value);\r\n    if (e.target.value === \"\") {\r\n      state.isSearch = false;\r\n    }\r\n  };\r\n\r\n  //handle submit\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (search) {\r\n      searchAnime(search);\r\n      state.isSearch = true;\r\n    } else {\r\n      state.isSearch = false;\r\n      alert(\"Please enter a search term\");\r\n    }\r\n  };\r\n\r\n  //fetch popular anime\r\n  const getPopularAnime = async () => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/anime?filter=bypopularity`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_POPULAR_ANIME, payload: data.data });\r\n  };\r\n\r\n  //fetch upcoming anime\r\n  const getUpcomingAnime = async () => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/top/anime?filter=upcoming`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_UPCOMING_ANIME, payload: data.data });\r\n  };\r\n\r\n  //fetch airing anime\r\n  const getAiringAnime = async () => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/top/anime?filter=airing`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_AIRING_ANIME, payload: data.data });\r\n  };\r\n\r\n  //search anime\r\n  const searchAnime = async (anime) => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(\r\n      `${baseUrl}/anime?q=${anime}&order_by=popularity&sort=asc&sfw`\r\n    );\r\n    const data = await response.json();\r\n    dispatch({ type: SEARCH, payload: data.data });\r\n  };\r\n\r\n  //get anime pictures\r\n  const getAnimePictures = async (id) => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(\r\n      `${baseUrl}/characters/${id}/pictures`\r\n    );\r\n    const data = await response.json();\r\n    dispatch({ type: GET_PICTURES, payload: data.data });\r\n  };\r\n\r\n\r\n  // Fetch anime details by ID\r\n  const getAnimeDetails = async (id) => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/anime/${id}`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_ANIME_DETAILS, payload: data });\r\n  };\r\n\r\n\r\n  // fetchWinterAnime: '/seasons/2022/winter'\r\n  const getWinterAnime = async () => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/seasons/2022/winter`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_WINTER_ANIME, payload: data.data });\r\n  };\r\n\r\n  // fetchAutumnAnime: '/seasons/2022/spring'\r\n  const getSpringAnime = async () => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/seasons/2022/spring`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_SPRING_ANIME, payload: data.data });\r\n  };\r\n\r\n  //fetchFallAnime:'/seasons/2022/Fall'\r\n  const getFallAnime = async () => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/seasons/2022/fall`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_FALL_ANIME, payload: data.data });\r\n  };\r\n\r\n  // fetchSummerAnime:'/seasons/2022/summer'\r\n  const getSummerAnime = async () => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/seasons/2022/summer`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_SUMMER_ANIME, payload: data.data });\r\n  };\r\n\r\n  // fetchNowSeason, 2 page:/seasons/now?type=anime&page=\r\n  const getNowAnime = async () => {\r\n    try {\r\n      dispatch({ type: LOADING });\r\n      const totalPagesToFetch = 2;\r\n      let currentPage = 1;\r\n      let allData = [];\r\n  \r\n      const delay = 2000; // 2 seconds delay\r\n  \r\n      const fetchPageData = async (page) => {\r\n        const response = await fetch(`${baseUrl}/seasons/now?type=anime&page=${page}`);\r\n        const responseData = await response.json();\r\n        return responseData.data;\r\n      };\r\n  \r\n      const fetchWithDelay = async () => {\r\n        if (currentPage <= totalPagesToFetch) {\r\n          const pageData = await fetchPageData(currentPage);\r\n          console.log('Response Data:', pageData);\r\n  \r\n          // Convert the object properties to an array of anime objects\r\n          const animeArray = Object.values(pageData);\r\n          console.log('Anime Array:', animeArray);\r\n  \r\n          allData = [...allData, ...animeArray];\r\n  \r\n          dispatch({ type: GET_NOW_ANIME, payload: allData });\r\n  \r\n          if (currentPage < totalPagesToFetch) {\r\n            currentPage++;\r\n            setTimeout(fetchWithDelay, delay);\r\n          }\r\n        }\r\n      };\r\n  \r\n      fetchWithDelay();\r\n    } catch (error) {\r\n      console.error('Error fetching now airing anime:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const delay = 2000; \r\n\r\n    const fetchWithDelay = async (fetchFunction) => {\r\n      await new Promise((resolve) => setTimeout(resolve, delay));\r\n      fetchFunction();\r\n    };\r\n    const fetchAllData = async () => {\r\n      await fetchWithDelay(getPopularAnime);\r\n      await fetchWithDelay(getUpcomingAnime);\r\n      await fetchWithDelay(getAiringAnime);\r\n      await fetchWithDelay(getWinterAnime);\r\n      await fetchWithDelay(getSummerAnime);\r\n      await fetchWithDelay(getSpringAnime);\r\n      await fetchWithDelay(getFallAnime);\r\n      await fetchWithDelay(getNowAnime);\r\n    };\r\n\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        ...state,\r\n        handleChange,\r\n        handleSubmit,\r\n        searchAnime,\r\n        search,\r\n        getPopularAnime,\r\n        getUpcomingAnime,\r\n        getAiringAnime,\r\n        getWinterAnime,\r\n        getSummerAnime,\r\n        getSpringAnime,\r\n        getFallAnime,\r\n        getNowAnime,\r\n        getAnimePictures,\r\n        getAnimeDetails,\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n\r\nconst useGlobalContext = () => {\r\n  return useContext(GlobalContext);\r\n};\r\n\r\nexport { GlobalContextProvider, useGlobalContext };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}