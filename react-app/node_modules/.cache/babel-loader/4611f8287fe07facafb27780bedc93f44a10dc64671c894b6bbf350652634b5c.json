{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Windows10\\\\Documents\\\\GitHub\\\\react-project\\\\react-app\\\\src\\\\componants\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport AnimeRow from \"./AnimeRow\";\nimport AnimeTable from \"./AnimeTable\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [animeCategories] = useState([{\n    title: \"Hot Hit\",\n    params: {\n      search: \"\",\n      sortBy: \"ranking\",\n      sortOrder: \"asc\"\n    }\n  }, {\n    title: \"Winter Hit\",\n    params: {\n      search: \"Winter\",\n      sortBy: \"ranking\",\n      sortOrder: \"asc\"\n    }\n  }\n  /*{ title: \"Summer Hit\", params: { search: \"Summer\"} },\r\n  { title: \"Winter Hit\", params: { search: \"Winter\"} },\r\n  { title: \"Autumn Hit\", params: { search: \"Autumn\"} },\r\n  { title: \"Fall Hit\", params: { search: \"Fall\"} },\r\n  { title: \"Top picks\", params: { search: \"Fight\"} },*/]);\n\n  const [animeData, setAnimeData] = useState([]);\n  useEffect(() => {\n    async function getAnimes(title, params) {\n      const options = {\n        method: \"GET\",\n        url: \"https://anime-db.p.rapidapi.com/anime\",\n        params: {\n          page: \"1\",\n          size: \"10\",\n          ...params\n        },\n        headers: {\n          \"X-RapidAPI-Key\": \"37cb7c6b14msh0e4bfef14681545p11e89cjsn78cd09bd4f7e\",\n          \"X-RapidAPI-Host\": \"anime-db.p.rapidapi.com\"\n        }\n      };\n      try {\n        const animes = await axios.request(options);\n        console.log(animes.data);\n        setAnimeData(animes.data.data);\n      } catch (error) {\n        console.error(\"Error fetching anime data:\", error);\n        return [];\n      }\n    }\n\n    /*animeCategories.forEach((category) => {\r\n      getAnimes(category.title, category.params);\r\n    });*/\n    async function fetchData() {\n      const newData = await Promise.all(animeCategories.map(async category => {\n        const data = await getAnimes(category.title, category.params);\n        return {\n          title: category.title,\n          data\n        };\n      }));\n      setAnimeData(newData);\n    }\n    fetchData();\n  }, []);\n\n  /*useEffect(() => {\r\n    const options = {\r\n      method: \"GET\",\r\n      url: \"https://anime-db.p.rapidapi.com/anime\",\r\n      params: {\r\n        page: \"1\",\r\n        size: \"10\",\r\n        sortBy: \"ranking\",\r\n        sortOrder: \"asc\" ,\r\n        ...params,\r\n      },\r\n      headers: {\r\n        \"X-RapidAPI-Key\": \"37cb7c6b14msh0e4bfef14681545p11e89cjsn78cd09bd4f7e\",\r\n        \"X-RapidAPI-Host\": \"anime-db.p.rapidapi.com\",\r\n      },\r\n    };\r\n      async function getAnimes() {\r\n      const animes = await axios.request(options);\r\n      console.log(animes.data);\r\n      setAnimeData(animes.data.data);\r\n    }\r\n    animeCategories.forEach((category) => {\r\n      getAnimes(category.title, category.params);\r\n    });\r\n  }, []);*/\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: animeCategories.map(category => /*#__PURE__*/_jsxDEV(AnimeRow, {\n      title: category.title,\n      data: animeData\n    }, category.title, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n}\n_s(Home, \"R5ITwymUN9xL5pPlX39ZqYOMaQI=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","AnimeRow","AnimeTable","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","animeCategories","title","params","search","sortBy","sortOrder","animeData","setAnimeData","getAnimes","options","method","url","page","size","headers","animes","request","console","log","data","error","fetchData","newData","Promise","all","map","category","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Windows10/Documents/GitHub/react-project/react-app/src/componants/Home.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport AnimeRow from \"./AnimeRow\";\r\nimport AnimeTable from \"./AnimeTable\";\r\nimport axios from \"axios\";\r\n\r\nfunction Home() {\r\n  const [animeCategories] = useState([\r\n    { title: \"Hot Hit\", params: { search: \"\", sortBy: \"ranking\", sortOrder: \"asc\" } },\r\n    {\r\n      title: \"Winter Hit\",\r\n      params: { search: \"Winter\", sortBy: \"ranking\", sortOrder: \"asc\" },\r\n    },\r\n    /*{ title: \"Summer Hit\", params: { search: \"Summer\"} },\r\n    { title: \"Winter Hit\", params: { search: \"Winter\"} },\r\n    { title: \"Autumn Hit\", params: { search: \"Autumn\"} },\r\n    { title: \"Fall Hit\", params: { search: \"Fall\"} },\r\n    { title: \"Top picks\", params: { search: \"Fight\"} },*/\r\n  ]);\r\n  const [animeData, setAnimeData] = useState([]);\r\n\r\n\r\n   useEffect(() => {\r\n    async function getAnimes(title, params) {\r\n      const options = {\r\n        method: \"GET\",\r\n        url: \"https://anime-db.p.rapidapi.com/anime\",\r\n        params: {\r\n          page: \"1\",\r\n          size: \"10\",\r\n          ...params,\r\n        },\r\n        headers: {\r\n          \"X-RapidAPI-Key\":\r\n            \"37cb7c6b14msh0e4bfef14681545p11e89cjsn78cd09bd4f7e\",\r\n          \"X-RapidAPI-Host\": \"anime-db.p.rapidapi.com\",\r\n        },\r\n      };\r\n\r\n      try {\r\n        const animes = await axios.request(options);\r\n        console.log(animes.data);\r\n        setAnimeData(animes.data.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching anime data:\", error);\r\n        return [];\r\n      }\r\n    }\r\n\r\n    /*animeCategories.forEach((category) => {\r\n      getAnimes(category.title, category.params);\r\n    });*/\r\n    async function fetchData() {\r\n      const newData = await Promise.all(\r\n        animeCategories.map(async (category) => {\r\n          const data = await getAnimes(category.title, category.params);\r\n          return { title: category.title, data };\r\n        })\r\n      );\r\n      setAnimeData(newData);\r\n    }\r\n  \r\n    fetchData();\r\n  }, []);\r\n\r\n  /*useEffect(() => {\r\n    const options = {\r\n      method: \"GET\",\r\n      url: \"https://anime-db.p.rapidapi.com/anime\",\r\n      params: {\r\n        page: \"1\",\r\n        size: \"10\",\r\n        sortBy: \"ranking\",\r\n        sortOrder: \"asc\" ,\r\n        ...params,\r\n      },\r\n      headers: {\r\n        \"X-RapidAPI-Key\": \"37cb7c6b14msh0e4bfef14681545p11e89cjsn78cd09bd4f7e\",\r\n        \"X-RapidAPI-Host\": \"anime-db.p.rapidapi.com\",\r\n      },\r\n    };\r\n\r\n    async function getAnimes() {\r\n      const animes = await axios.request(options);\r\n      console.log(animes.data);\r\n      setAnimeData(animes.data.data);\r\n    }\r\n    animeCategories.forEach((category) => {\r\n      getAnimes(category.title, category.params);\r\n    });\r\n  }, []);*/\r\n\r\n  return (\r\n    <>\r\n      {animeCategories.map((category) => (\r\n        <AnimeRow\r\n          key={category.title}\r\n          title={category.title}\r\n          data={animeData}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\nexport default Home;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}