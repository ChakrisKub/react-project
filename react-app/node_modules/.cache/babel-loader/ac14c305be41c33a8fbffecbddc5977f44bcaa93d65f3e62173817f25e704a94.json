{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Windows10\\\\Documents\\\\GitHub\\\\react-project\\\\react-app\\\\src\\\\context\\\\global.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from \"react\";\nimport { useState, useEffect } from \"react\";\nimport reducer from \"./reducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GlobalContext = /*#__PURE__*/createContext();\nconst baseUrl = \"https://api.jikan.moe/v4\";\n\n//actions\nconst LOADING = \"LOADING\";\nconst SEARCH = \"SEARCH\";\nconst GET_POPULAR_ANIME = \"GET_POPULAR_ANIME\";\nconst GET_UPCOMING_ANIME = \"GET_UPCOMING_ANIME\";\nconst GET_AIRING_ANIME = \"GET_AIRING_ANIME\";\nconst GET_PICTURES = \"GET_PICTURES\";\nconst GET_ANIME_DETAILS = \"GET_ANIME_DETAILS\";\nconst GET_ANIME_GENRES = \"GET_ANIME_GENRES\";\nconst SET_SELECTED_GENRE = \"SET_SELECTED_GENRE\";\nconst GET_WINTER_ANIME = \"GET_WINTER_ANIME\";\nconst GET_SUMMER_ANIME = \"GET_SUMMER_ANIME\";\nconst GET_SPRING_ANIME = \"GET_SPRING_ANIME\";\nconst GET_FALL_ANIME = \"GET_FALL_ANIME\";\nconst GlobalContextProvider = ({\n  children\n}) => {\n  _s();\n  //intial state\n  const intialState = {\n    popularAnime: [],\n    upcomingAnime: [],\n    airingAnime: [],\n    winterAnime: [],\n    summerAnime: [],\n    springAnime: [],\n    fallAnime: [],\n    pictures: [],\n    isSearch: false,\n    searchResults: [],\n    loading: false,\n    animeGenres: [],\n    // Add animeGenres\n    selectedGenre: null // Add selectedGenre\n  };\n\n  const [state, dispatch] = useReducer(reducer, intialState);\n  const [search, setSearch] = useState(\"\");\n\n  //handle change\n  const handleChange = e => {\n    setSearch(e.target.value);\n    if (e.target.value === \"\") {\n      state.isSearch = false;\n    }\n  };\n\n  //handle submit\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (search) {\n      searchAnime(search);\n      state.isSearch = true;\n    } else {\n      state.isSearch = false;\n      alert(\"Please enter a search term\");\n    }\n  };\n\n  //fetch popular anime\n  const getPopularAnime = async () => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/top/anime?filter=bypopularity`);\n    const data = await response.json();\n    dispatch({\n      type: GET_POPULAR_ANIME,\n      payload: data.data\n    });\n  };\n\n  //fetch upcoming anime\n  const getUpcomingAnime = async () => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/top/anime?filter=upcoming`);\n    const data = await response.json();\n    dispatch({\n      type: GET_UPCOMING_ANIME,\n      payload: data.data\n    });\n  };\n\n  //fetch airing anime\n  const getAiringAnime = async () => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/top/anime?filter=airing`);\n    const data = await response.json();\n    dispatch({\n      type: GET_AIRING_ANIME,\n      payload: data.data\n    });\n  };\n\n  //search anime\n  const searchAnime = async anime => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/anime?q=${anime}&order_by=popularity&sort=asc&sfw`);\n    const data = await response.json();\n    dispatch({\n      type: SEARCH,\n      payload: data.data\n    });\n  };\n\n  //get anime pictures\n  const getAnimePictures = async id => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/characters/${id}/pictures`);\n    const data = await response.json();\n    dispatch({\n      type: GET_PICTURES,\n      payload: data.data\n    });\n  };\n\n  //fetch anime by genre https://api.jikan.moe/v4/genres/anime\n  const getAnimeGenres = async () => {\n    try {\n      console.log(\"Fetching anime genres...\");\n      const response = await fetch(`${baseUrl}/genres/anime`);\n      const data = await response.json();\n      dispatch({\n        type: GET_ANIME_GENRES,\n        payload: data.data\n      });\n      console.log(\"Anime genres fetched:\", data.data);\n    } catch (error) {\n      console.error(\"Error fetching anime genres:\", error);\n    }\n  };\n\n  // Fetch anime details by ID\n  const getAnimeDetails = async id => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/anime/${id}`);\n    const data = await response.json();\n    dispatch({\n      type: GET_ANIME_DETAILS,\n      payload: data\n    });\n  };\n\n  // Action to set the selected genre\n  const setSelectedGenre = genreId => {\n    dispatch({\n      type: SET_SELECTED_GENRE,\n      payload: genreId\n    });\n  };\n\n  // Define the getAnimeNamesByGenre function\n  // Inside your context file\n  const getAnimeNamesByGenre = async genreId => {\n    const genre = state.animeGenres.find(genre => genre.mal_id === genreId);\n    if (genre && genre.name) {\n      return genre.name; // Return the genre name as a single string\n    }\n\n    return \"\";\n  };\n\n  // fetchWinterAnime: '/seasons/2022/winter'\n  const getWinterAnime = async () => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/seasons/2022/winter`);\n    const data = await response.json();\n    dispatch({\n      type: GET_WINTER_ANIME,\n      payload: data.data\n    });\n  };\n\n  // fetchAutumnAnime: '/seasons/2022/spring'\n  const getSpringAnime = async () => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/seasons/2022/spring`);\n    const data = await response.json();\n    dispatch({\n      type: GET_SPRING_ANIME,\n      payload: data.data\n    });\n  };\n\n  //fetchFallAnime:'/seasons/2022/Fall'\n  const getFallAnime = async () => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/seasons/2022/fall`);\n    const data = await response.json();\n    dispatch({\n      type: GET_FALL_ANIME,\n      payload: data.data\n    });\n  };\n\n  // fetchSummerAnime:'/seasons/2022/summer'\n  const getSummerAnime = async () => {\n    dispatch({\n      type: LOADING\n    });\n    const response = await fetch(`${baseUrl}/seasons/2022/summer`);\n    const data = await response.json();\n    dispatch({\n      type: GET_SUMMER_ANIME,\n      payload: data.data\n    });\n  };\n\n  // useEffect(() => {\n  //   getPopularAnime();\n  //   getUpcomingAnime();\n  //   getAiringAnime();\n  //   getWinterAnime();\n  //   getSummerAnime();\n  //   getSpringAnime();\n  //   getFallAnime();\n  // }, []);\n\n  useEffect(() => {\n    const delay = 1800;\n    const fetchWithDelay = async fetchFunction => {\n      await new Promise(resolve => setTimeout(resolve, delay));\n      fetchFunction();\n    };\n    const fetchAllData = async () => {\n      await fetchWithDelay(getPopularAnime);\n      await fetchWithDelay(getUpcomingAnime);\n      await fetchWithDelay(getAiringAnime);\n      await fetchWithDelay(getWinterAnime);\n      await fetchWithDelay(getSummerAnime);\n      await fetchWithDelay(getSpringAnime);\n      await fetchWithDelay(getFallAnime);\n    };\n    fetchAllData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      ...state,\n      handleChange,\n      handleSubmit,\n      searchAnime,\n      search,\n      getPopularAnime,\n      getUpcomingAnime,\n      getAiringAnime,\n      getWinterAnime,\n      getSummerAnime,\n      getSpringAnime,\n      getFallAnime,\n      getAnimePictures,\n      getAnimeGenres,\n      getAnimeDetails,\n      getAnimeNamesByGenre,\n      setSelectedGenre // Add this action to the value\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s(GlobalContextProvider, \"lLOVGVtU33wTd0PjbByvhYXt3RY=\");\n_c = GlobalContextProvider;\nconst useGlobalContext = () => {\n  _s2();\n  return useContext(GlobalContext);\n};\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport { GlobalContextProvider, useGlobalContext };\nvar _c;\n$RefreshReg$(_c, \"GlobalContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useState","useEffect","reducer","jsxDEV","_jsxDEV","GlobalContext","baseUrl","LOADING","SEARCH","GET_POPULAR_ANIME","GET_UPCOMING_ANIME","GET_AIRING_ANIME","GET_PICTURES","GET_ANIME_DETAILS","GET_ANIME_GENRES","SET_SELECTED_GENRE","GET_WINTER_ANIME","GET_SUMMER_ANIME","GET_SPRING_ANIME","GET_FALL_ANIME","GlobalContextProvider","children","_s","intialState","popularAnime","upcomingAnime","airingAnime","winterAnime","summerAnime","springAnime","fallAnime","pictures","isSearch","searchResults","loading","animeGenres","selectedGenre","state","dispatch","search","setSearch","handleChange","e","target","value","handleSubmit","preventDefault","searchAnime","alert","getPopularAnime","type","response","fetch","data","json","payload","getUpcomingAnime","getAiringAnime","anime","getAnimePictures","id","getAnimeGenres","console","log","error","getAnimeDetails","setSelectedGenre","genreId","getAnimeNamesByGenre","genre","find","mal_id","name","getWinterAnime","getSpringAnime","getFallAnime","getSummerAnime","delay","fetchWithDelay","fetchFunction","Promise","resolve","setTimeout","fetchAllData","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useGlobalContext","_s2","$RefreshReg$"],"sources":["C:/Users/Windows10/Documents/GitHub/react-project/react-app/src/context/global.js"],"sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst GlobalContext = createContext();\r\nconst baseUrl = \"https://api.jikan.moe/v4\";\r\n\r\n//actions\r\nconst LOADING = \"LOADING\";\r\nconst SEARCH = \"SEARCH\";\r\nconst GET_POPULAR_ANIME = \"GET_POPULAR_ANIME\";\r\nconst GET_UPCOMING_ANIME = \"GET_UPCOMING_ANIME\";\r\nconst GET_AIRING_ANIME = \"GET_AIRING_ANIME\";\r\nconst GET_PICTURES = \"GET_PICTURES\";\r\nconst GET_ANIME_DETAILS = \"GET_ANIME_DETAILS\";\r\nconst GET_ANIME_GENRES = \"GET_ANIME_GENRES\";\r\nconst SET_SELECTED_GENRE = \"SET_SELECTED_GENRE\";\r\nconst GET_WINTER_ANIME = \"GET_WINTER_ANIME\";\r\nconst GET_SUMMER_ANIME = \"GET_SUMMER_ANIME\";\r\nconst GET_SPRING_ANIME = \"GET_SPRING_ANIME\";\r\nconst GET_FALL_ANIME = \"GET_FALL_ANIME\";\r\n\r\nconst GlobalContextProvider = ({ children }) => {\r\n  //intial state\r\n  const intialState = {\r\n    popularAnime: [],\r\n    upcomingAnime: [],\r\n    airingAnime: [],\r\n    winterAnime: [],\r\n    summerAnime: [],\r\n    springAnime: [],\r\n    fallAnime: [],\r\n    pictures: [],\r\n    isSearch: false,\r\n    searchResults: [],\r\n    loading: false,\r\n    animeGenres: [], // Add animeGenres\r\n    selectedGenre: null, // Add selectedGenre\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(reducer, intialState);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  //handle change\r\n  const handleChange = (e) => {\r\n    setSearch(e.target.value);\r\n    if (e.target.value === \"\") {\r\n      state.isSearch = false;\r\n    }\r\n  };\r\n\r\n  //handle submit\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (search) {\r\n      searchAnime(search);\r\n      state.isSearch = true;\r\n    } else {\r\n      state.isSearch = false;\r\n      alert(\"Please enter a search term\");\r\n    }\r\n  };\r\n\r\n  //fetch popular anime\r\n  const getPopularAnime = async () => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/top/anime?filter=bypopularity`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_POPULAR_ANIME, payload: data.data });\r\n  };\r\n\r\n  //fetch upcoming anime\r\n  const getUpcomingAnime = async () => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/top/anime?filter=upcoming`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_UPCOMING_ANIME, payload: data.data });\r\n  };\r\n\r\n  //fetch airing anime\r\n  const getAiringAnime = async () => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/top/anime?filter=airing`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_AIRING_ANIME, payload: data.data });\r\n  };\r\n\r\n  //search anime\r\n  const searchAnime = async (anime) => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(\r\n      `${baseUrl}/anime?q=${anime}&order_by=popularity&sort=asc&sfw`\r\n    );\r\n    const data = await response.json();\r\n    dispatch({ type: SEARCH, payload: data.data });\r\n  };\r\n\r\n  //get anime pictures\r\n  const getAnimePictures = async (id) => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(\r\n      `${baseUrl}/characters/${id}/pictures`\r\n    );\r\n    const data = await response.json();\r\n    dispatch({ type: GET_PICTURES, payload: data.data });\r\n  };\r\n\r\n  //fetch anime by genre https://api.jikan.moe/v4/genres/anime\r\n  const getAnimeGenres = async () => {\r\n    try {\r\n      console.log(\"Fetching anime genres...\");\r\n      const response = await fetch(`${baseUrl}/genres/anime`);\r\n      const data = await response.json();\r\n      dispatch({ type: GET_ANIME_GENRES, payload: data.data });\r\n      console.log(\"Anime genres fetched:\", data.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching anime genres:\", error);\r\n    }\r\n  };\r\n\r\n  // Fetch anime details by ID\r\n  const getAnimeDetails = async (id) => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/anime/${id}`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_ANIME_DETAILS, payload: data });\r\n  };\r\n\r\n  // Action to set the selected genre\r\n  const setSelectedGenre = (genreId) => {\r\n    dispatch({ type: SET_SELECTED_GENRE, payload: genreId });\r\n  };\r\n\r\n  // Define the getAnimeNamesByGenre function\r\n  // Inside your context file\r\n  const getAnimeNamesByGenre = async (genreId) => {\r\n    const genre = state.animeGenres.find((genre) => genre.mal_id === genreId);\r\n    if (genre && genre.name) {\r\n      return genre.name; // Return the genre name as a single string\r\n    }\r\n    return \"\";\r\n  };\r\n\r\n  // fetchWinterAnime: '/seasons/2022/winter'\r\n  const getWinterAnime = async () => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/seasons/2022/winter`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_WINTER_ANIME, payload: data.data });\r\n  };\r\n\r\n  // fetchAutumnAnime: '/seasons/2022/spring'\r\n  const getSpringAnime = async () => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/seasons/2022/spring`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_SPRING_ANIME, payload: data.data });\r\n  };\r\n\r\n  //fetchFallAnime:'/seasons/2022/Fall'\r\n  const getFallAnime = async () => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/seasons/2022/fall`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_FALL_ANIME, payload: data.data });\r\n  };\r\n\r\n  // fetchSummerAnime:'/seasons/2022/summer'\r\n  const getSummerAnime = async () => {\r\n    dispatch({ type: LOADING });\r\n    const response = await fetch(`${baseUrl}/seasons/2022/summer`);\r\n    const data = await response.json();\r\n    dispatch({ type: GET_SUMMER_ANIME, payload: data.data });\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   getPopularAnime();\r\n  //   getUpcomingAnime();\r\n  //   getAiringAnime();\r\n  //   getWinterAnime();\r\n  //   getSummerAnime();\r\n  //   getSpringAnime();\r\n  //   getFallAnime();\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    const delay = 1800; \r\n\r\n    const fetchWithDelay = async (fetchFunction) => {\r\n      await new Promise((resolve) => setTimeout(resolve, delay));\r\n      fetchFunction();\r\n    };\r\n    const fetchAllData = async () => {\r\n      await fetchWithDelay(getPopularAnime);\r\n      await fetchWithDelay(getUpcomingAnime);\r\n      await fetchWithDelay(getAiringAnime);\r\n      await fetchWithDelay(getWinterAnime);\r\n      await fetchWithDelay(getSummerAnime);\r\n      await fetchWithDelay(getSpringAnime);\r\n      await fetchWithDelay(getFallAnime);\r\n    };\r\n\r\n    fetchAllData();\r\n  }, []);\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        ...state,\r\n        handleChange,\r\n        handleSubmit,\r\n        searchAnime,\r\n        search,\r\n        getPopularAnime,\r\n        getUpcomingAnime,\r\n        getAiringAnime,\r\n        getWinterAnime,\r\n        getSummerAnime,\r\n        getSpringAnime,\r\n        getFallAnime,\r\n        getAnimePictures,\r\n        getAnimeGenres,\r\n        getAnimeDetails,\r\n        getAnimeNamesByGenre,\r\n        setSelectedGenre, // Add this action to the value\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n\r\nconst useGlobalContext = () => {\r\n  return useContext(GlobalContext);\r\n};\r\n\r\nexport { GlobalContextProvider, useGlobalContext };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}