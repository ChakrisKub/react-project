{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import PropTypes from \"prop-types\";\n// import { Link } from \"react-router-dom\";\n// import styled from \"styled-components\";\n\n// function AnimeTable({ title, fetchUrl, className }) {\n//   const [animes, setAnimes] = useState([]);\n\n//   useEffect(() => {\n//     async function fetchAnimeData() {\n//       const request = await axios.get(fetchUrl);\n//       console.log(request.data);\n//       setAnimes(request.data.data);\n//       console.log(animes);\n//       return request;\n//     }\n//     fetchAnimeData();\n//   }, [fetchUrl]);\n\n//   return (\n//     <div className={className}>\n//       <div class=\"container--animeRow--anime\">\n//         <h1>Anime {title}</h1>\n//         <div className=\"container--animeRow--anime--all--list\">\n//           {animes.length > 0 ? (\n//             animes.map((anime) => (\n//               <div className=\"itemes\" key={anime.mal_id}>\n//                 <Link to={`/anime-details/${anime.mal_id}`}>\n//                   <img\n//                     src={anime.images.jpg.large_image_url}\n//                     alt={anime.title}\n//                   />\n//                 </Link>\n//               </div>\n//             ))\n//           ) : (\n//             <p>Loading Anime List...</p>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// AnimeTable.propTypes = {\n//   title: PropTypes.string.isRequired,\n//   fetchUrl: PropTypes.string.isRequired,\n//   className: PropTypes.string.isRequired,\n// };\n\n// export default styled(AnimeTable)`\n//   .container--animeRow--anime {\n//     max-width: 2200px;\n//     background: rgb(0, 0, 0);\n//     width: 100%;\n//     position: relative;\n//   }\n//   .container--animeRow--anime--all--list {\n//     display: grid;\n//     grid-auto-flow: row;\n//     grid-template-columns: repeat(auto-fill, minmax(calc(100% / 6), 1fr));\n//   }\n\n//   .container--animeRow--anime--all--list .itemes {\n//     height: 340px;\n//     cursor: pointer;\n//     object-fit: cover;\n//   }\n\n//   .container--animeRow--anime--all--list .itemes img {\n//     border-radius: 5px;\n//     width: 100%;\n//     height: 340px;\n//     transform: scale(0.9);\n//     transition: all ease 0.2s;\n//     /* object-fit: cover;*/\n//   }\n//   .container--animeRow--anime--all--list .itemes img:hover {\n//     transform: scale(1);\n//   }\n//   /*animerow all lis resposive*/\n//   @media screen and (max-width: 1000px) {\n//     .container--animeRow--anime--all--list {\n//       grid-template-columns: repeat(auto-fill, minmax(calc(100% / 4), 1fr));\n//     }\n//   }\n//   @media screen and (max-width: 800px) {\n//     .container--animeRow--anime--all--list {\n//       grid-template-columns: repeat(auto-fill, minmax(calc(100% / 3), 1fr));\n//     }\n//   }\n//   @media screen and (max-width: 500px) {\n//     .container--animeRow--anime--all--list {\n//       grid-template-columns: repeat(auto-fill, minmax(calc(100% / 2), 1fr));\n//     }\n//   }\n//   @media screen and (max-width: 400px) {\n//     .container--animeRow--anime--all--list {\n//       grid-template-columns: repeat(auto-fill, minmax(100%, 1fr));\n//     }\n//   }\n// `;","map":{"version":3,"names":[],"sources":["C:/Users/Windows10/Documents/GitHub/react-project/react-app/src/componants/AnimeTable.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n// import styled from \"styled-components\";\r\n\r\n// function AnimeTable({ title, fetchUrl, className }) {\r\n//   const [animes, setAnimes] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     async function fetchAnimeData() {\r\n//       const request = await axios.get(fetchUrl);\r\n//       console.log(request.data);\r\n//       setAnimes(request.data.data);\r\n//       console.log(animes);\r\n//       return request;\r\n//     }\r\n//     fetchAnimeData();\r\n//   }, [fetchUrl]);\r\n\r\n//   return (\r\n//     <div className={className}>\r\n//       <div class=\"container--animeRow--anime\">\r\n//         <h1>Anime {title}</h1>\r\n//         <div className=\"container--animeRow--anime--all--list\">\r\n//           {animes.length > 0 ? (\r\n//             animes.map((anime) => (\r\n//               <div className=\"itemes\" key={anime.mal_id}>\r\n//                 <Link to={`/anime-details/${anime.mal_id}`}>\r\n//                   <img\r\n//                     src={anime.images.jpg.large_image_url}\r\n//                     alt={anime.title}\r\n//                   />\r\n//                 </Link>\r\n//               </div>\r\n//             ))\r\n//           ) : (\r\n//             <p>Loading Anime List...</p>\r\n//           )}\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// AnimeTable.propTypes = {\r\n//   title: PropTypes.string.isRequired,\r\n//   fetchUrl: PropTypes.string.isRequired,\r\n//   className: PropTypes.string.isRequired,\r\n// };\r\n\r\n// export default styled(AnimeTable)`\r\n//   .container--animeRow--anime {\r\n//     max-width: 2200px;\r\n//     background: rgb(0, 0, 0);\r\n//     width: 100%;\r\n//     position: relative;\r\n//   }\r\n//   .container--animeRow--anime--all--list {\r\n//     display: grid;\r\n//     grid-auto-flow: row;\r\n//     grid-template-columns: repeat(auto-fill, minmax(calc(100% / 6), 1fr));\r\n//   }\r\n\r\n//   .container--animeRow--anime--all--list .itemes {\r\n//     height: 340px;\r\n//     cursor: pointer;\r\n//     object-fit: cover;\r\n//   }\r\n\r\n//   .container--animeRow--anime--all--list .itemes img {\r\n//     border-radius: 5px;\r\n//     width: 100%;\r\n//     height: 340px;\r\n//     transform: scale(0.9);\r\n//     transition: all ease 0.2s;\r\n//     /* object-fit: cover;*/\r\n//   }\r\n//   .container--animeRow--anime--all--list .itemes img:hover {\r\n//     transform: scale(1);\r\n//   }\r\n//   /*animerow all lis resposive*/\r\n//   @media screen and (max-width: 1000px) {\r\n//     .container--animeRow--anime--all--list {\r\n//       grid-template-columns: repeat(auto-fill, minmax(calc(100% / 4), 1fr));\r\n//     }\r\n//   }\r\n//   @media screen and (max-width: 800px) {\r\n//     .container--animeRow--anime--all--list {\r\n//       grid-template-columns: repeat(auto-fill, minmax(calc(100% / 3), 1fr));\r\n//     }\r\n//   }\r\n//   @media screen and (max-width: 500px) {\r\n//     .container--animeRow--anime--all--list {\r\n//       grid-template-columns: repeat(auto-fill, minmax(calc(100% / 2), 1fr));\r\n//     }\r\n//   }\r\n//   @media screen and (max-width: 400px) {\r\n//     .container--animeRow--anime--all--list {\r\n//       grid-template-columns: repeat(auto-fill, minmax(100%, 1fr));\r\n//     }\r\n//   }\r\n// `;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}