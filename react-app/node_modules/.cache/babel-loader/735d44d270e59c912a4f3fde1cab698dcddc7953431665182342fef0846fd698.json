{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Windows10\\\\Documents\\\\GitHub\\\\react-project\\\\react-app\\\\src\\\\componants\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport AnimeRow from \"./AnimeRow\";\nimport AnimeTable from \"./AnimeTable\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [animeData, setAnimeData] = useState([]);\n  const [animeCategories] = useState([{\n    title: \"Award Winning\",\n    params: {\n      genres: \"Award Winning\"\n    }\n  }\n  //{ title: \"Fantasy Hit\", params: { genres: \"Fantasy\" } },\n  //{ title: \"Action Hit\", params: { genres: \"Action\" } },\n  /*{ title: \"Action Hit\", params: { genres: \"Action\"} },\r\n  { title: \"Drama Hit\", params: { genres: \"Drama\"} },\r\n  { title: \"Comedy Hit\", params: { genres: \"Comedy\"} },\r\n  { title: \"Mystery Hit\", params: { genres: \"Mystery\"} },\r\n  { title: \"Top Boys Love picks\", params: { genres: \"Boys Love\"} },*/]);\n\n  const maxItemsPerRow = 10;\n  useEffect(() => {\n    async function fetchAnimeData() {\n      const options = {\n        method: \"GET\",\n        url: \"https://anime-db.p.rapidapi.com/anime\",\n        params: {\n          page: \"1\",\n          size: \"1000\",\n          sortBy: \"ranking\"\n        },\n        headers: {\n          \"X-RapidAPI-Key\": \"8c1dd609c0msh55007741e312580p1be040jsn871593d54e0c\",\n          \"X-RapidAPI-Host\": \"anime-db.p.rapidapi.com\"\n        }\n      };\n      try {\n        const response = await axios.request(options);\n        console.log(response.data);\n        setAnimeData(response.data.data);\n      } catch (error) {\n        console.error(\"Error fetching anime data:\", error);\n      }\n    }\n    fetchAnimeData();\n  }, []);\n\n  /* useEffect(() => {\r\n     async function getAnimes(title, params) {\r\n       const options = {\r\n         method: \"GET\",\r\n         url: \"https://anime-db.p.rapidapi.com/anime\",\r\n         params: {\r\n           page: \"1\",\r\n           size: \"10\",\r\n           sortBy: \"ranking\",\r\n           ...params,\r\n         },\r\n         headers: {\r\n           \"X-RapidAPI-Key\":\r\n             \"8c1dd609c0msh55007741e312580p1be040jsn871593d54e0c\",\r\n           \"X-RapidAPI-Host\": \"anime-db.p.rapidapi.com\",\r\n         },\r\n       };\r\n       console.log(options);\r\n  \n       try {\r\n         const animes = await axios.request(options);\r\n         console.log(animes.data);\r\n         setAnimeData((prevData) => ({\r\n           ...prevData,\r\n           [title]: animes.data.data,\r\n         }));\r\n         console.log(animes.data.data);\r\n       } catch (error) {\r\n         console.error(\"Error fetching anime data:\", error);\r\n       }\r\n     }\r\n  \n     animeCategories.forEach((category) => {\r\n       getAnimes(category.title, category.params);\r\n       console.log(category.title, category.params);\r\n     });\r\n   }, []);*/\n\n  /*useEffect(() => {\r\n    const options = {\r\n      method: \"GET\",\r\n      url: \"https://anime-db.p.rapidapi.com/anime\",\r\n      params: {\r\n        page: \"1\",\r\n        size: \"10\",\r\n        sortBy: \"ranking\",\r\n        sortOrder: \"asc\" ,\r\n        ...params,\r\n      },\r\n      headers: {\r\n        \"X-RapidAPI-Key\": \"37cb7c6b14msh0e4bfef14681545p11e89cjsn78cd09bd4f7e\",\r\n        \"X-RapidAPI-Host\": \"anime-db.p.rapidapi.com\",\r\n      },\r\n    };\r\n      async function getAnimes() {\r\n      const animes = await axios.request(options);\r\n      console.log(animes.data);\r\n      setAnimeData(animes.data.data);\r\n    }\r\n    animeCategories.forEach((category) => {\r\n      getAnimes(category.title, category.params);\r\n    });\r\n  }, []);*/\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container--animeRow\",\n      children: animeCategories.length > 0 ? animeCategories.map((category, index) => /*#__PURE__*/_jsxDEV(AnimeRow, {\n        title: category.title,\n        data: animeData.slice(index * maxItemsPerRow, (index + 1) * maxItemsPerRow)\n      }, category.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading Anime...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Home, \"Z9mfoRPRE1J6uzXiZVH9fLnnTo4=\");\n_c = Home;\nexport default Home;\n\n/*\r\n{animeCategories.map((category) => (\r\n        <AnimeRow\r\n          key={category.title}\r\n          title={category.title}\r\n          data={animeData[category.title]|| []}\r\n        />\r\n      ))}\r\n*/\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","AnimeRow","AnimeTable","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","animeData","setAnimeData","animeCategories","title","params","genres","maxItemsPerRow","fetchAnimeData","options","method","url","page","size","sortBy","headers","response","request","console","log","data","error","children","className","length","map","category","index","slice","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Windows10/Documents/GitHub/react-project/react-app/src/componants/Home.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport AnimeRow from \"./AnimeRow\";\r\nimport AnimeTable from \"./AnimeTable\";\r\nimport axios from \"axios\";\r\n\r\nfunction Home() {\r\n  const [animeData, setAnimeData] = useState([]);\r\n  const [animeCategories] = useState([\r\n    { title: \"Award Winning\", params: { genres: \"Award Winning\" } },\r\n    //{ title: \"Fantasy Hit\", params: { genres: \"Fantasy\" } },\r\n    //{ title: \"Action Hit\", params: { genres: \"Action\" } },\r\n    /*{ title: \"Action Hit\", params: { genres: \"Action\"} },\r\n    { title: \"Drama Hit\", params: { genres: \"Drama\"} },\r\n    { title: \"Comedy Hit\", params: { genres: \"Comedy\"} },\r\n    { title: \"Mystery Hit\", params: { genres: \"Mystery\"} },\r\n    { title: \"Top Boys Love picks\", params: { genres: \"Boys Love\"} },*/\r\n  ]);\r\n  const maxItemsPerRow = 10;\r\n\r\n  useEffect(() => {\r\n    async function fetchAnimeData() {\r\n      const options = {\r\n        method: \"GET\",\r\n        url: \"https://anime-db.p.rapidapi.com/anime\",\r\n        params: {\r\n          page: \"1\",\r\n          size: \"1000\",\r\n          sortBy: \"ranking\",\r\n        },\r\n        headers: {\r\n          \"X-RapidAPI-Key\": \"8c1dd609c0msh55007741e312580p1be040jsn871593d54e0c\",\r\n          \"X-RapidAPI-Host\": \"anime-db.p.rapidapi.com\",\r\n        },\r\n      };\r\n\r\n      try {\r\n        const response = await axios.request(options);\r\n        console.log(response.data);\r\n        setAnimeData(response.data.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching anime data:\", error);\r\n      }\r\n    }\r\n\r\n    fetchAnimeData();\r\n  }, []);\r\n\r\n /* useEffect(() => {\r\n    async function getAnimes(title, params) {\r\n      const options = {\r\n        method: \"GET\",\r\n        url: \"https://anime-db.p.rapidapi.com/anime\",\r\n        params: {\r\n          page: \"1\",\r\n          size: \"10\",\r\n          sortBy: \"ranking\",\r\n          ...params,\r\n        },\r\n        headers: {\r\n          \"X-RapidAPI-Key\":\r\n            \"8c1dd609c0msh55007741e312580p1be040jsn871593d54e0c\",\r\n          \"X-RapidAPI-Host\": \"anime-db.p.rapidapi.com\",\r\n        },\r\n      };\r\n      console.log(options);\r\n\r\n      try {\r\n        const animes = await axios.request(options);\r\n        console.log(animes.data);\r\n        setAnimeData((prevData) => ({\r\n          ...prevData,\r\n          [title]: animes.data.data,\r\n        }));\r\n        console.log(animes.data.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching anime data:\", error);\r\n      }\r\n    }\r\n\r\n    animeCategories.forEach((category) => {\r\n      getAnimes(category.title, category.params);\r\n      console.log(category.title, category.params);\r\n    });\r\n  }, []);*/\r\n\r\n  /*useEffect(() => {\r\n    const options = {\r\n      method: \"GET\",\r\n      url: \"https://anime-db.p.rapidapi.com/anime\",\r\n      params: {\r\n        page: \"1\",\r\n        size: \"10\",\r\n        sortBy: \"ranking\",\r\n        sortOrder: \"asc\" ,\r\n        ...params,\r\n      },\r\n      headers: {\r\n        \"X-RapidAPI-Key\": \"37cb7c6b14msh0e4bfef14681545p11e89cjsn78cd09bd4f7e\",\r\n        \"X-RapidAPI-Host\": \"anime-db.p.rapidapi.com\",\r\n      },\r\n    };\r\n\r\n    async function getAnimes() {\r\n      const animes = await axios.request(options);\r\n      console.log(animes.data);\r\n      setAnimeData(animes.data.data);\r\n    }\r\n    animeCategories.forEach((category) => {\r\n      getAnimes(category.title, category.params);\r\n    });\r\n  }, []);*/\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container--animeRow\">\r\n      {animeCategories.length > 0 ? (\r\n        animeCategories.map((category, index) => (\r\n          <AnimeRow\r\n            key={category.title}\r\n            title={category.title}\r\n            data={animeData.slice(index * maxItemsPerRow, (index + 1) * maxItemsPerRow)}\r\n          />\r\n        ))\r\n      ) : (\r\n        <p>Loading Anime...</p>\r\n      )}\r\n    </div>\r\n    </>\r\n  );\r\n}\r\nexport default Home;\r\n\r\n/*\r\n{animeCategories.map((category) => (\r\n        <AnimeRow\r\n          key={category.title}\r\n          title={category.title}\r\n          data={animeData[category.title]|| []}\r\n        />\r\n      ))}\r\n*/\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}