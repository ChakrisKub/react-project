{"ast":null,"code":"// import React, { createContext, useContext, useReducer } from \"react\";\n// import { useState, useEffect } from \"react\";\n// import reducer from \"./reducer\";\n\n// const GlobalContext = createContext();\n// const baseUrl = \"https://api.jikan.moe/v4\";\n\n// //actions\n// const LOADING = \"LOADING\";\n// const SEARCH = \"SEARCH\";\n// const GET_POPULAR_ANIME = \"GET_POPULAR_ANIME\";\n// const GET_UPCOMING_ANIME = \"GET_UPCOMING_ANIME\";\n// const GET_AIRING_ANIME = \"GET_AIRING_ANIME\";\n// const GET_PICTURES = \"GET_PICTURES\";\n// const GET_ANIME_DETAILS = \"GET_ANIME_DETAILS\";\n// const GET_ANIME_GENRES = \"GET_ANIME_GENRES\";\n// const SET_SELECTED_GENRE = \"SET_SELECTED_GENRE\";\n\n// const GlobalContextProvider = ({ children }) => {\n//   //intial state\n//   const intialState = {\n//     popularAnime: [],\n//     upcomingAnime: [],\n//     airingAnime: [],\n//     pictures: [],\n//     isSearch: false,\n//     searchResults: [],\n//     loading: false,\n//     animeGenres: [], // Add animeGenres\n//     selectedGenre: null, // Add selectedGenre\n//   };\n\n//   const [state, dispatch] = useReducer(reducer, intialState);\n//   const [search, setSearch] = useState(\"\");\n\n//   //handle change\n//   const handleChange = (e) => {\n//     setSearch(e.target.value);\n//     if (e.target.value === \"\") {\n//       state.isSearch = false;\n//     }\n//   };\n\n//   //handle submit\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     if (search) {\n//       searchAnime(search);\n//       state.isSearch = true;\n//     } else {\n//       state.isSearch = false;\n//       alert(\"Please enter a search term\");\n//     }\n//   };\n\n//   //fetch popular anime\n//   const getPopularAnime = async () => {\n//     dispatch({ type: LOADING });\n//     try {\n//       const response = await fetch(`${baseUrl}/top/anime?filter=bypopularity`);\n//       if (response.status === 429) {\n//         console.error(\"API rate limit exceeded\");\n//         return;\n//       }\n//       const data = await response.json();\n//       dispatch({ type: GET_POPULAR_ANIME, payload: data.data });\n//     } catch (error) {\n//       console.error(\"Error fetching popular anime:\", error);\n//     }\n//   };\n\n//   //fetch upcoming anime\n//   const getUpcomingAnime = async () => {\n//     dispatch({ type: LOADING });\n//     const response = await fetch(`${baseUrl}/top/anime?filter=upcoming`);\n//     const data = await response.json();\n//     dispatch({ type: GET_UPCOMING_ANIME, payload: data.data });\n//   };\n\n//   //fetch airing anime\n//   const getAiringAnime = async () => {\n//     dispatch({ type: LOADING });\n//     const response = await fetch(`${baseUrl}/top/anime?filter=airing`);\n//     const data = await response.json();\n//     dispatch({ type: GET_AIRING_ANIME, payload: data.data });\n//   };\n\n//   //search anime\n//   const searchAnime = async (anime) => {\n//     dispatch({ type: LOADING });\n//     const response = await fetch(\n//       `https://api.jikan.moe/v4/anime?q=${anime}&order_by=popularity&sort=asc&sfw`\n//     );\n//     const data = await response.json();\n//     dispatch({ type: SEARCH, payload: data.data });\n//   };\n\n//   //get anime pictures\n//   const getAnimePictures = async (id) => {\n//     dispatch({ type: LOADING });\n//     const response = await fetch(\n//       `https://api.jikan.moe/v4/characters/${id}/pictures`\n//     );\n//     const data = await response.json();\n//     dispatch({ type: GET_PICTURES, payload: data.data });\n//   };\n\n//   //fetch anime by genre https://api.jikan.moe/v4/genres/anime\n//   const getAnimeGenres = async () => {\n//     try {\n//       console.log(\"Fetching anime genres...\");\n//       const response = await fetch(`${baseUrl}/genres/anime`);\n//       const data = await response.json();\n//       dispatch({ type: GET_ANIME_GENRES, payload: data.data });\n//       console.log(\"Anime genres fetched:\", data.data);\n//     } catch (error) {\n//       console.error(\"Error fetching anime genres:\", error);\n//     }\n//   };\n\n//   // Fetch anime details by ID\n//   const getAnimeDetails = async (id) => {\n//     dispatch({ type: LOADING });\n//     const response = await fetch(`${baseUrl}/anime/${id}`);\n//     const data = await response.json();\n//     dispatch({ type: GET_ANIME_DETAILS, payload: data });\n//   };\n\n//   // Action to set the selected genre\n//   const setSelectedGenre = (genreId) => {\n//     dispatch({ type: SET_SELECTED_GENRE, payload: genreId });\n//   };\n\n//   // Define the getAnimeNamesByGenre function\n//   // Inside your context file\n//   const getAnimeNamesByGenre = async (genreId) => {\n//     const genre = state.animeGenres.find((genre) => genre.mal_id === genreId);\n//     if (genre && genre.name) {\n//       return genre.name; // Return the genre name as a single string\n//     }\n//     return \"\";\n//   };\n\n// useEffect(() => {\n//     getPopularAnime(); \n//     getUpcomingAnime();\n\n//   }, []);\n\n//   return (\n//     <GlobalContext.Provider\n//       value={{\n//         ...state,\n//         handleChange,\n//         handleSubmit,\n//         searchAnime,\n//         search,\n//         getPopularAnime,\n//         getUpcomingAnime,\n//         getAiringAnime,\n//         getAnimePictures,\n//         getAnimeGenres,\n//         getAnimeDetails,\n//         getAnimeNamesByGenre,\n//         setSelectedGenre, // Add this action to the value\n//       }}\n//     >\n//       {children}\n//     </GlobalContext.Provider>\n//   );\n// };\n\n// const useGlobalContext = () => {\n//   return useContext(GlobalContext);\n// };\n\n// export { GlobalContextProvider, useGlobalContext };","map":{"version":3,"names":[],"sources":["C:/Users/Windows10/Documents/GitHub/react-project/react-app/src/context/global.js"],"sourcesContent":["// import React, { createContext, useContext, useReducer } from \"react\";\r\n// import { useState, useEffect } from \"react\";\r\n// import reducer from \"./reducer\";\r\n\r\n// const GlobalContext = createContext();\r\n// const baseUrl = \"https://api.jikan.moe/v4\";\r\n\r\n// //actions\r\n// const LOADING = \"LOADING\";\r\n// const SEARCH = \"SEARCH\";\r\n// const GET_POPULAR_ANIME = \"GET_POPULAR_ANIME\";\r\n// const GET_UPCOMING_ANIME = \"GET_UPCOMING_ANIME\";\r\n// const GET_AIRING_ANIME = \"GET_AIRING_ANIME\";\r\n// const GET_PICTURES = \"GET_PICTURES\";\r\n// const GET_ANIME_DETAILS = \"GET_ANIME_DETAILS\";\r\n// const GET_ANIME_GENRES = \"GET_ANIME_GENRES\";\r\n// const SET_SELECTED_GENRE = \"SET_SELECTED_GENRE\";\r\n\r\n// const GlobalContextProvider = ({ children }) => {\r\n//   //intial state\r\n//   const intialState = {\r\n//     popularAnime: [],\r\n//     upcomingAnime: [],\r\n//     airingAnime: [],\r\n//     pictures: [],\r\n//     isSearch: false,\r\n//     searchResults: [],\r\n//     loading: false,\r\n//     animeGenres: [], // Add animeGenres\r\n//     selectedGenre: null, // Add selectedGenre\r\n//   };\r\n\r\n//   const [state, dispatch] = useReducer(reducer, intialState);\r\n//   const [search, setSearch] = useState(\"\");\r\n\r\n//   //handle change\r\n//   const handleChange = (e) => {\r\n//     setSearch(e.target.value);\r\n//     if (e.target.value === \"\") {\r\n//       state.isSearch = false;\r\n//     }\r\n//   };\r\n\r\n//   //handle submit\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     if (search) {\r\n//       searchAnime(search);\r\n//       state.isSearch = true;\r\n//     } else {\r\n//       state.isSearch = false;\r\n//       alert(\"Please enter a search term\");\r\n//     }\r\n//   };\r\n\r\n//   //fetch popular anime\r\n//   const getPopularAnime = async () => {\r\n//     dispatch({ type: LOADING });\r\n//     try {\r\n//       const response = await fetch(`${baseUrl}/top/anime?filter=bypopularity`);\r\n//       if (response.status === 429) {\r\n//         console.error(\"API rate limit exceeded\");\r\n//         return;\r\n//       }\r\n//       const data = await response.json();\r\n//       dispatch({ type: GET_POPULAR_ANIME, payload: data.data });\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching popular anime:\", error);\r\n//     }\r\n//   };\r\n\r\n//   //fetch upcoming anime\r\n//   const getUpcomingAnime = async () => {\r\n//     dispatch({ type: LOADING });\r\n//     const response = await fetch(`${baseUrl}/top/anime?filter=upcoming`);\r\n//     const data = await response.json();\r\n//     dispatch({ type: GET_UPCOMING_ANIME, payload: data.data });\r\n//   };\r\n\r\n//   //fetch airing anime\r\n//   const getAiringAnime = async () => {\r\n//     dispatch({ type: LOADING });\r\n//     const response = await fetch(`${baseUrl}/top/anime?filter=airing`);\r\n//     const data = await response.json();\r\n//     dispatch({ type: GET_AIRING_ANIME, payload: data.data });\r\n//   };\r\n\r\n//   //search anime\r\n//   const searchAnime = async (anime) => {\r\n//     dispatch({ type: LOADING });\r\n//     const response = await fetch(\r\n//       `https://api.jikan.moe/v4/anime?q=${anime}&order_by=popularity&sort=asc&sfw`\r\n//     );\r\n//     const data = await response.json();\r\n//     dispatch({ type: SEARCH, payload: data.data });\r\n//   };\r\n\r\n//   //get anime pictures\r\n//   const getAnimePictures = async (id) => {\r\n//     dispatch({ type: LOADING });\r\n//     const response = await fetch(\r\n//       `https://api.jikan.moe/v4/characters/${id}/pictures`\r\n//     );\r\n//     const data = await response.json();\r\n//     dispatch({ type: GET_PICTURES, payload: data.data });\r\n//   };\r\n\r\n//   //fetch anime by genre https://api.jikan.moe/v4/genres/anime\r\n//   const getAnimeGenres = async () => {\r\n//     try {\r\n//       console.log(\"Fetching anime genres...\");\r\n//       const response = await fetch(`${baseUrl}/genres/anime`);\r\n//       const data = await response.json();\r\n//       dispatch({ type: GET_ANIME_GENRES, payload: data.data });\r\n//       console.log(\"Anime genres fetched:\", data.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching anime genres:\", error);\r\n//     }\r\n//   };\r\n\r\n//   // Fetch anime details by ID\r\n//   const getAnimeDetails = async (id) => {\r\n//     dispatch({ type: LOADING });\r\n//     const response = await fetch(`${baseUrl}/anime/${id}`);\r\n//     const data = await response.json();\r\n//     dispatch({ type: GET_ANIME_DETAILS, payload: data });\r\n//   };\r\n\r\n//   // Action to set the selected genre\r\n//   const setSelectedGenre = (genreId) => {\r\n//     dispatch({ type: SET_SELECTED_GENRE, payload: genreId });\r\n//   };\r\n\r\n//   // Define the getAnimeNamesByGenre function\r\n//   // Inside your context file\r\n//   const getAnimeNamesByGenre = async (genreId) => {\r\n//     const genre = state.animeGenres.find((genre) => genre.mal_id === genreId);\r\n//     if (genre && genre.name) {\r\n//       return genre.name; // Return the genre name as a single string\r\n//     }\r\n//     return \"\";\r\n//   };\r\n\r\n\r\n// useEffect(() => {\r\n//     getPopularAnime(); \r\n//     getUpcomingAnime();\r\n\r\n//   }, []);\r\n\r\n//   return (\r\n//     <GlobalContext.Provider\r\n//       value={{\r\n//         ...state,\r\n//         handleChange,\r\n//         handleSubmit,\r\n//         searchAnime,\r\n//         search,\r\n//         getPopularAnime,\r\n//         getUpcomingAnime,\r\n//         getAiringAnime,\r\n//         getAnimePictures,\r\n//         getAnimeGenres,\r\n//         getAnimeDetails,\r\n//         getAnimeNamesByGenre,\r\n//         setSelectedGenre, // Add this action to the value\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </GlobalContext.Provider>\r\n//   );\r\n// };\r\n\r\n// const useGlobalContext = () => {\r\n//   return useContext(GlobalContext);\r\n// };\r\n\r\n// export { GlobalContextProvider, useGlobalContext };\r\n"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}