{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport axios from \"../axios\";\nfunction AnimeRow({\n  title,\n  fetchUrl\n}) {\n  _s();\n  const [animes, setAnimes] = useState([]);\n  const animeRowRef = useRef(null);\n  const imagesPerScroll = 6;\n  const itemWidth = 300;\n  useEffect(() => {\n    async function fetchAnimeData() {\n      const request = await axios.get(fetchUrl);\n      console.log(request.data);\n      setAnimes(re);\n      return request;\n    }\n    fetchAnimeData();\n  }, []);\n}\n_s(AnimeRow, \"mwCIAdW2qWpRCCjHcZKoIB1SwbY=\");\n_c = AnimeRow;\nexport default AnimeRow;\n\n// function AnimeRow({ title, data }) {\n//   const animeRowRef = useRef(null);\n//   const imagesPerScroll = 6;\n//   const itemWidth = 300;\n\n//   /*useEffect(() => {\n//     const options = {\n//       method: \"GET\",\n//       url: \"https://anime-db.p.rapidapi.com/anime\",\n//       params: {\n//         page: \"1\",\n//         size: \"10\",\n//         sortBy: \"ranking\",\n//         sortOrder: \"asc\",\n//       },\n//       headers: {\n//         \"X-RapidAPI-Key\": \"f009e8294dmshaea6eeead8d70fcp14eed1jsn633681721e75\",\n//         \"X-RapidAPI-Host\": \"anime-db.p.rapidapi.com\",\n//       },\n//     };\n\n//     async function getAnimes() {\n//       const animes = await axios.request(options);\n//       console.log(animes.data);\n//       setImages(animes.data.data);\n//     }\n//     getAnimes();\n//   }, []);\n// */\n// useEffect(() => {\n//   if (animeRowRef.current) {\n//     console.log(\"Container width:\", animeRowRef.current.offsetWidth);\n//     const itemElement = animeRowRef.current.querySelector(\".itemes\");\n//     if (itemElement) {\n//       console.log(\"Item width:\", itemElement.offsetWidth);\n//     }\n//   }\n// }, []);\n\n//   const scrollLeft = () => {\n//     console.log('left');\n//     const currentScroll = animeRowRef.current.scrollLeft;\n//     animeRowRef.current.scrollTo({\n//       left: currentScroll - imagesPerScroll * itemWidth,\n//       behavior: \"smooth\",\n//     });\n//   };\n\n//   const scrollRight = () => {\n//     console.log('right');\n//     const currentScroll = animeRowRef.current.scrollLeft;\n//     animeRowRef.current.scrollTo({\n//       left: currentScroll + imagesPerScroll * itemWidth,\n//       behavior: \"smooth\",\n//     });\n//   };\n\n//   return (\n//     <>\n//       <div className=\"container--animeRow--anime\" ref={animeRowRef}>\n//         <i className=\"fa-solid fa-angle-left\" onClick={scrollLeft}></i>\n//         <h1>Anime {title}</h1>\n//         <div className=\"container--animeRow--anime--list\">\n//           {data.length > 0 ? (\n//             data.map((anime, index) => (\n//               <div key={index} className=\"itemes\">\n//                 <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n//                   <img src={anime.image} alt={`Anime ${index}`} />\n//                   console.log(anime.id);\n//                 </a>\n//               </div>\n//             ))\n//           ) : (\n//             <p>Loading Anime List...</p>\n//           )}\n//         </div>\n//         <i className=\"fa-solid fa-angle-right\" onClick={scrollRight}></i>\n//       </div>\n//     </>\n//   );\n// }\n\n// AnimeRow.propTypes = {\n//   title: PropTypes.string.isRequired,\n//   data: PropTypes.array.isRequired,\n// };\n\n// export default AnimeRow;\nvar _c;\n$RefreshReg$(_c, \"AnimeRow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","PropTypes","axios","AnimeRow","title","fetchUrl","_s","animes","setAnimes","animeRowRef","imagesPerScroll","itemWidth","fetchAnimeData","request","get","console","log","data","re","_c","$RefreshReg$"],"sources":["C:/Users/Windows10/Documents/GitHub/react-project/react-app/src/componants/AnimeRow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport axios from \"../axios\";\r\n\r\nfunction AnimeRow({title, fetchUrl}){\r\n  const [animes, setAnimes] = useState([]);\r\n  const animeRowRef = useRef(null);\r\n  const imagesPerScroll = 6;\r\n  const itemWidth = 300;\r\n  \r\n  useEffect(() => {\r\n    async function fetchAnimeData(){\r\n      const request = await axios.get(fetchUrl);\r\n      console.log(request.data);\r\n      setAnimes(re)\r\n      return request\r\n\r\n    }\r\n    fetchAnimeData();\r\n\r\n  }, []);\r\n\r\n}\r\nexport default AnimeRow;\r\n\r\n// function AnimeRow({ title, data }) {\r\n//   const animeRowRef = useRef(null);\r\n//   const imagesPerScroll = 6;\r\n//   const itemWidth = 300;\r\n\r\n//   /*useEffect(() => {\r\n//     const options = {\r\n//       method: \"GET\",\r\n//       url: \"https://anime-db.p.rapidapi.com/anime\",\r\n//       params: {\r\n//         page: \"1\",\r\n//         size: \"10\",\r\n//         sortBy: \"ranking\",\r\n//         sortOrder: \"asc\",\r\n//       },\r\n//       headers: {\r\n//         \"X-RapidAPI-Key\": \"f009e8294dmshaea6eeead8d70fcp14eed1jsn633681721e75\",\r\n//         \"X-RapidAPI-Host\": \"anime-db.p.rapidapi.com\",\r\n//       },\r\n//     };\r\n\r\n//     async function getAnimes() {\r\n//       const animes = await axios.request(options);\r\n//       console.log(animes.data);\r\n//       setImages(animes.data.data);\r\n//     }\r\n//     getAnimes();\r\n//   }, []);\r\n// */\r\n// useEffect(() => {\r\n//   if (animeRowRef.current) {\r\n//     console.log(\"Container width:\", animeRowRef.current.offsetWidth);\r\n//     const itemElement = animeRowRef.current.querySelector(\".itemes\");\r\n//     if (itemElement) {\r\n//       console.log(\"Item width:\", itemElement.offsetWidth);\r\n//     }\r\n//   }\r\n// }, []);\r\n\r\n//   const scrollLeft = () => {\r\n//     console.log('left');\r\n//     const currentScroll = animeRowRef.current.scrollLeft;\r\n//     animeRowRef.current.scrollTo({\r\n//       left: currentScroll - imagesPerScroll * itemWidth,\r\n//       behavior: \"smooth\",\r\n//     });\r\n//   };\r\n\r\n//   const scrollRight = () => {\r\n//     console.log('right');\r\n//     const currentScroll = animeRowRef.current.scrollLeft;\r\n//     animeRowRef.current.scrollTo({\r\n//       left: currentScroll + imagesPerScroll * itemWidth,\r\n//       behavior: \"smooth\",\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"container--animeRow--anime\" ref={animeRowRef}>\r\n//         <i className=\"fa-solid fa-angle-left\" onClick={scrollLeft}></i>\r\n//         <h1>Anime {title}</h1>\r\n//         <div className=\"container--animeRow--anime--list\">\r\n//           {data.length > 0 ? (\r\n//             data.map((anime, index) => (\r\n//               <div key={index} className=\"itemes\">\r\n//                 <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n//                   <img src={anime.image} alt={`Anime ${index}`} />\r\n//                   console.log(anime.id);\r\n//                 </a>\r\n//               </div>\r\n//             ))\r\n//           ) : (\r\n//             <p>Loading Anime List...</p>\r\n//           )}\r\n//         </div>\r\n//         <i className=\"fa-solid fa-angle-right\" onClick={scrollRight}></i>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// AnimeRow.propTypes = {\r\n//   title: PropTypes.string.isRequired,\r\n//   data: PropTypes.array.isRequired,\r\n// };\r\n\r\n// export default AnimeRow;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,UAAU;AAE5B,SAASC,QAAQA,CAAC;EAACC,KAAK;EAAEC;AAAQ,CAAC,EAAC;EAAAC,EAAA;EAClC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAMW,WAAW,GAAGT,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMU,eAAe,GAAG,CAAC;EACzB,MAAMC,SAAS,GAAG,GAAG;EAErBZ,SAAS,CAAC,MAAM;IACd,eAAea,cAAcA,CAAA,EAAE;MAC7B,MAAMC,OAAO,GAAG,MAAMX,KAAK,CAACY,GAAG,CAACT,QAAQ,CAAC;MACzCU,OAAO,CAACC,GAAG,CAACH,OAAO,CAACI,IAAI,CAAC;MACzBT,SAAS,CAACU,EAAE,CAAC;MACb,OAAOL,OAAO;IAEhB;IACAD,cAAc,CAAC,CAAC;EAElB,CAAC,EAAE,EAAE,CAAC;AAER;AAACN,EAAA,CAlBQH,QAAQ;AAAAgB,EAAA,GAARhB,QAAQ;AAmBjB,eAAeA,QAAQ;;AAEvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}